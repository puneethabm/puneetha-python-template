{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Summary Python template - Project structure. Good practices With the evolution of Cloud; you are not restricted to using/managing config file/s, you can also rely on Cloud services like AWS Secrets Manager, SSM Parameter Store, etc. to maintain secret values or even default values Never ever Hard code environment name, even if you have just 1 environment. It has to either come from environment variable or config file or some other mechanism Prefix your environment variables with something specific to your project, to avoid conflicts with other projects. For this package, I choose \"PBM_\" Keep your environment variable mapping in 1 common place. Use the python variables to map it to minimize the impact of change Ex: puneetha-python-template/utils/constants/env_variable_mapper.py Always use a code linter of your choice from day 1 of your project Stick to 1 convention - choose between Singular vs Plural! Ideally Singular! Python main packages used mypy - Type checking pytest - Testing python package pylint - Codestyle checker pydocstyle - Docstring style checker pdoc3 - Docstring generator python package loguru - Logging tox - Running test suite mkdocstrings - Static site generator from \"*.md\" files Set-up instructions here You are all set to Fly! :)","title":"Home"},{"location":"#summary","text":"Python template - Project structure.","title":"Summary"},{"location":"#good-practices","text":"With the evolution of Cloud; you are not restricted to using/managing config file/s, you can also rely on Cloud services like AWS Secrets Manager, SSM Parameter Store, etc. to maintain secret values or even default values Never ever Hard code environment name, even if you have just 1 environment. It has to either come from environment variable or config file or some other mechanism Prefix your environment variables with something specific to your project, to avoid conflicts with other projects. For this package, I choose \"PBM_\" Keep your environment variable mapping in 1 common place. Use the python variables to map it to minimize the impact of change Ex: puneetha-python-template/utils/constants/env_variable_mapper.py Always use a code linter of your choice from day 1 of your project Stick to 1 convention - choose between Singular vs Plural! Ideally Singular!","title":"Good practices"},{"location":"#python-main-packages-used","text":"mypy - Type checking pytest - Testing python package pylint - Codestyle checker pydocstyle - Docstring style checker pdoc3 - Docstring generator python package loguru - Logging tox - Running test suite mkdocstrings - Static site generator from \"*.md\" files","title":"Python main packages used"},{"location":"#set-up-instructions-here","text":"","title":"Set-up instructions here"},{"location":"#you-are-all-set-to-fly","text":"","title":"You are all set to Fly! :)"},{"location":"BUILD_PROCESS/","text":"Build process Install all the packages listed in requirements.txt file shell pip install -r requirements.txt Docstring style checker ```shell # Simple pydocstyle Config pydocstyle --config=config/.pydocstylerc Run pydocstyle for specific folder: Ex: run pydocstyle for folder 'puneetha_python_template/utils' PYDOCSTYLE_FILES=$(find puneetha_python_template/utils -type f -name \"*.py\") echo PYDOCSTYLE_FILES pydocstyle --config=config/.pydocstylerc $PYDOCSTYLE_FILES ``` Example view of the pydocstyle run shell pydocstyle --config=config/.pydocstylerc puneetha_python_template Note : When everything in package is adhering to standard, it will return no result. This means 100% success! Example view of the pydocstyle run - Error scenario Codestyle checker ```shell # Simple test without config pylint pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc puneetha_python_template # Custom config pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc Add processes pylint --verbose -j 2 --load-plugins pylint_quotes --rcfile=config/.pylintrc Run pylint for specific folder - display errors only: Ex: run pylint for folder 'puneetha_python_template/utils' PYLINT_FILES=$(find puneetha_python_template/utils -type f -name \"*.py\") echo $PYLINT_FILES pylint -E --load-plugins pylint_quotes --rcfile=config/.pylintrc $PYLINT_FILES ``` Example view of the pylint run shell pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc puneetha_python_template Export pylint results to html file - example with unnecessary newlines shell pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc --output-format=json puneetha_python_template | pylint-json2html -o auto_generated/pylint.html Run tests ## Run test from config file: shell pytest -c ./config/tox.ini Run test from arguments shell pytest -c ./config/tox.ini --cov-report html:auto_generated/coverage --cov=usage Run test for specific subpackage folder shell pytest --cache-clear -p no:warnings -rp --html=auto_generated/pytest_report.html --cov-report html:auto_generated/html_cov --ignore=puneetha_python_template/utils/custom_logger.py puneetha_python_template/utils Run unittest from command line. Example: shell python -m unittest puneetha_python_template.tests.test_utils.test_general_utils.TestGeneralUtils (or) shell python -m unittest puneetha_python_template/tests/test_utils/test_general_utils.py ## Example view of the generated coverage file Generate docstring & publish ## Launch the docstring shell pdoc3 puneetha_python_template --http :8099 Save the docstring to a html file shell pdoc3 puneetha_python_template --force --html -o auto_generated/docstrings Example view of the generated file Generate mkdocs ## Configuration: https://www.mkdocs.org/user-guide/configuration/ ## Example: https://docs.civicrm.org/dev/en/latest/extensions/documentation/ shell # Start server: mkdocs serve --config-file ./config/mkdocs.yml # Output: Serving on http://127.0.0.1:8000/ ## Deploy: https://www.mkdocs.org/user-guide/deploying-your-docs/ shell mkdocs gh-deploy --clean --config-file ./config/mkdocs.yml ## Example view of the generated file Build egg file ```shell python setup.py bdist_egg (or) with install python setup.py install bdist_egg ``` Loguru read more here","title":"Build process"},{"location":"BUILD_PROCESS/#build-process","text":"Install all the packages listed in requirements.txt file shell pip install -r requirements.txt Docstring style checker ```shell # Simple pydocstyle","title":"Build process"},{"location":"BUILD_PROCESS/#config","text":"pydocstyle --config=config/.pydocstylerc","title":"Config"},{"location":"BUILD_PROCESS/#run-pydocstyle-for-specific-folder","text":"","title":"Run pydocstyle for specific folder:"},{"location":"BUILD_PROCESS/#ex-run-pydocstyle-for-folder-puneetha_python_templateutils","text":"PYDOCSTYLE_FILES=$(find puneetha_python_template/utils -type f -name \"*.py\") echo PYDOCSTYLE_FILES pydocstyle --config=config/.pydocstylerc $PYDOCSTYLE_FILES ```","title":"Ex: run pydocstyle for folder 'puneetha_python_template/utils'"},{"location":"BUILD_PROCESS/#example-view-of-the-pydocstyle-run","text":"shell pydocstyle --config=config/.pydocstylerc puneetha_python_template Note : When everything in package is adhering to standard, it will return no result. This means 100% success!","title":"Example view of the pydocstyle run"},{"location":"BUILD_PROCESS/#example-view-of-the-pydocstyle-run-error-scenario","text":"Codestyle checker ```shell # Simple test without config pylint pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc puneetha_python_template # Custom config pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc","title":"Example view of the pydocstyle run - Error scenario"},{"location":"BUILD_PROCESS/#add-processes","text":"pylint --verbose -j 2 --load-plugins pylint_quotes --rcfile=config/.pylintrc","title":"Add processes"},{"location":"BUILD_PROCESS/#run-pylint-for-specific-folder-display-errors-only","text":"","title":"Run pylint for specific folder - display errors only:"},{"location":"BUILD_PROCESS/#ex-run-pylint-for-folder-puneetha_python_templateutils","text":"PYLINT_FILES=$(find puneetha_python_template/utils -type f -name \"*.py\") echo $PYLINT_FILES pylint -E --load-plugins pylint_quotes --rcfile=config/.pylintrc $PYLINT_FILES ```","title":"Ex: run pylint for folder 'puneetha_python_template/utils'"},{"location":"BUILD_PROCESS/#example-view-of-the-pylint-run","text":"shell pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc puneetha_python_template","title":"Example view of the pylint run"},{"location":"BUILD_PROCESS/#export-pylint-results-to-html-file-example-with-unnecessary-newlines","text":"shell pylint --load-plugins pylint_quotes --rcfile=config/.pylintrc --output-format=json puneetha_python_template | pylint-json2html -o auto_generated/pylint.html Run tests ## Run test from config file: shell pytest -c ./config/tox.ini","title":"Export pylint results to html file - example with unnecessary newlines"},{"location":"BUILD_PROCESS/#run-test-from-arguments","text":"shell pytest -c ./config/tox.ini --cov-report html:auto_generated/coverage --cov=usage","title":"Run test from arguments"},{"location":"BUILD_PROCESS/#run-test-for-specific-subpackage-folder","text":"shell pytest --cache-clear -p no:warnings -rp --html=auto_generated/pytest_report.html --cov-report html:auto_generated/html_cov --ignore=puneetha_python_template/utils/custom_logger.py puneetha_python_template/utils","title":"Run test for specific subpackage folder"},{"location":"BUILD_PROCESS/#run-unittest-from-command-line-example","text":"shell python -m unittest puneetha_python_template.tests.test_utils.test_general_utils.TestGeneralUtils (or) shell python -m unittest puneetha_python_template/tests/test_utils/test_general_utils.py ## Example view of the generated coverage file Generate docstring & publish ## Launch the docstring shell pdoc3 puneetha_python_template --http :8099","title":"Run unittest from command line. Example:"},{"location":"BUILD_PROCESS/#save-the-docstring-to-a-html-file","text":"shell pdoc3 puneetha_python_template --force --html -o auto_generated/docstrings","title":"Save the docstring to a html file"},{"location":"BUILD_PROCESS/#example-view-of-the-generated-file","text":"Generate mkdocs ## Configuration: https://www.mkdocs.org/user-guide/configuration/ ## Example: https://docs.civicrm.org/dev/en/latest/extensions/documentation/ shell # Start server: mkdocs serve --config-file ./config/mkdocs.yml # Output: Serving on http://127.0.0.1:8000/ ## Deploy: https://www.mkdocs.org/user-guide/deploying-your-docs/ shell mkdocs gh-deploy --clean --config-file ./config/mkdocs.yml ## Example view of the generated file Build egg file ```shell python setup.py bdist_egg","title":"Example view of the generated file"},{"location":"BUILD_PROCESS/#or-with-install","text":"python setup.py install bdist_egg ``` Loguru read more here","title":"(or) with install"},{"location":"CONVENTIONS/","text":"Conventions","title":"Conventions"},{"location":"CONVENTIONS/#conventions","text":"","title":"Conventions"},{"location":"DEV_SETUP/","text":"Dev Set up Install Python 3.7 https://www.python.org/downloads/release/python-379/ Set up JDK 1.8 Download JDK from here Set JAVA_HOME: Linux/Mac instructions here Windows instructions here Download and Install Pycharm community edition https://www.jetbrains.com/pycharm/download Pycharm setting - Set up python virtual environment interpreter Note: - Make sure name is \".venv\", as this is already set in .gitignore as a file to be ignored while committing to git. Else choose the name and make sure to add it to gitignore - Close and open the terminal after this step to switch to \".venv\" Pycharm setting - Set up integrated tools like test runner, docstring format, etc. Pycharm setting - Point to pylint config file Pycharm setting - Make sure to include the main package name for import to pick up the auto-completion of your package name Upgrade pip Note: Open terminal in PyCharm python -m pip install -U pip Set below Environment variables in three sections Key: PBM_LOG_FILE_PATH Value example: \"/var/log/data-engineering.log\" Note: More environment variables information is in this python environment mapper file Section 1: Set environment variables for running the programs Go to Run -> Edit Configurations -> Templates -> Python Section 2: Set environment variables for test cases Go to Run -> Edit Configurations -> Templates -> Python tests -> Unittests Section 3: Set environment variables for running commands in terminal Go to Preferences -> Tools -> Terminal -> Note: Environment variable values need not be same for all 3 sections. In-fact, they are meant to be different. For example, you might want to set log level to DEBUG in some cases. Install python packages Note: Open terminal in PyCharm pip install -r requirements.txt Enable pre-commit Use the pre-commit hook for linting staged files prior to a commit (mandatory, triggers pydocstyle and pylint) pre-commit install --hook-type pre-commit Example Git helpers Run below to save credentials - to avoid entering credentials for every push git config credential.helper store Allow long file name git config core.longpaths true","title":"Dev Set Up"},{"location":"DEV_SETUP/#dev-set-up","text":"","title":"Dev Set up"},{"location":"DEV_SETUP/#install-python-37","text":"https://www.python.org/downloads/release/python-379/","title":"Install Python 3.7"},{"location":"DEV_SETUP/#set-up-jdk-18","text":"Download JDK from here Set JAVA_HOME: Linux/Mac instructions here Windows instructions here","title":"Set up JDK 1.8"},{"location":"DEV_SETUP/#download-and-install-pycharm-community-edition","text":"https://www.jetbrains.com/pycharm/download","title":"Download and Install Pycharm community edition"},{"location":"DEV_SETUP/#pycharm-setting-set-up-python-virtual-environment-interpreter","text":"Note: - Make sure name is \".venv\", as this is already set in .gitignore as a file to be ignored while committing to git. Else choose the name and make sure to add it to gitignore - Close and open the terminal after this step to switch to \".venv\"","title":"Pycharm setting - Set up python virtual environment interpreter"},{"location":"DEV_SETUP/#pycharm-setting-set-up-integrated-tools-like-test-runner-docstring-format-etc","text":"","title":"Pycharm setting - Set up integrated tools like test runner, docstring format, etc."},{"location":"DEV_SETUP/#pycharm-setting-point-to-pylint-config-file","text":"","title":"Pycharm setting - Point to pylint config file"},{"location":"DEV_SETUP/#pycharm-setting-make-sure-to-include-the-main-package-name-for-import-to-pick-up-the-auto-completion-of-your-package-name","text":"","title":"Pycharm setting - Make sure to include the main package name for import to pick up the auto-completion of your package name"},{"location":"DEV_SETUP/#upgrade-pip","text":"Note: Open terminal in PyCharm python -m pip install -U pip","title":"Upgrade pip"},{"location":"DEV_SETUP/#set-below-environment-variables-in-three-sections","text":"Key: PBM_LOG_FILE_PATH Value example: \"/var/log/data-engineering.log\" Note: More environment variables information is in this python environment mapper file","title":"Set below Environment variables in three sections"},{"location":"DEV_SETUP/#section-1-set-environment-variables-for-running-the-programs","text":"Go to Run -> Edit Configurations -> Templates -> Python","title":"Section 1: Set environment variables for running the programs"},{"location":"DEV_SETUP/#section-2-set-environment-variables-for-test-cases","text":"Go to Run -> Edit Configurations -> Templates -> Python tests -> Unittests","title":"Section 2: Set environment variables for test cases"},{"location":"DEV_SETUP/#section-3-set-environment-variables-for-running-commands-in-terminal","text":"Go to Preferences -> Tools -> Terminal -> Note: Environment variable values need not be same for all 3 sections. In-fact, they are meant to be different. For example, you might want to set log level to DEBUG in some cases.","title":"Section 3: Set environment variables for running commands in terminal"},{"location":"DEV_SETUP/#install-python-packages","text":"Note: Open terminal in PyCharm pip install -r requirements.txt","title":"Install python packages"},{"location":"DEV_SETUP/#enable-pre-commit","text":"Use the pre-commit hook for linting staged files prior to a commit (mandatory, triggers pydocstyle and pylint) pre-commit install --hook-type pre-commit","title":"Enable pre-commit"},{"location":"DEV_SETUP/#example","text":"","title":"Example"},{"location":"DEV_SETUP/#_1","text":"","title":""},{"location":"DEV_SETUP/#git-helpers","text":"Run below to save credentials - to avoid entering credentials for every push git config credential.helper store Allow long file name git config core.longpaths true","title":"Git helpers"},{"location":"PROJECT_STRUCTURE/","text":"Python Project Structure puneetha_python_template -> Python template files \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module \u251c\u2500\u2500 ... -> Python files \u251c\u2500\u2500 utils -> Helper utilities/functions which can be used across projects | \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module | \u251c\u2500\u2500 file_utils.py -> File Utilities | \u2514\u2500\u2500 constants - Project specific constants | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Default values python files | \u2514\u2500\u2500 tests -> Unit test files | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 test_file_utils.py | \u2514\u2500\u2500 test_constants - Project specific constants | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Default values python test files | \u251c\u2500\u2500 integration_tests -> Integration test files \u2502 \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Test files | \u251c\u2500\u2500 config -> Configuration files for code style, etc. \u2502 \u251c\u2500\u2500 .pylintrc -> Enforce PEP8 Code Style \u2502 \u251c\u2500\u2500 .pydocstylerc -> Enforce docstring style \u2502 \u251c\u2500\u2500 mkdocs.yml -> Enforce md file generator instructions \u2502 \u251c\u2500\u2500 .mypy.ini -> Type checking options \u2502 \u2514\u2500\u2500 tox.ini -> Pytest config - test a python package in a set of virtual environments | \u251c\u2500\u2500 requirements.txt -> This file lists all of the Python packages that your app depends on | \u251c\u2500\u2500 setup.py -> Python dependency management tool | \u251c\u2500\u2500 README.md -> Summary of the project and any helpful documentation | \u251c\u2500\u2500 .gitignore -> Instructs git to ignore the files/directories specified in this file | \u251c\u2500\u2500 .pre-commit-config.yaml -> Managing and maintaining pre-commit hooks | \u251c\u2500\u2500 scripts -> General scripts, deployment scripts, etc. | \u251c\u2500\u2500 project_docs -> detailed set of readme files for developers | \u251c\u2500\u2500 images -> Images to be used in readme documents | \u2514\u2500\u2500 ... -> All images which helps in documentation | \u251c\u2500\u2500 PROJECT_STRUCTURE.md -> Project Structure | \u251c\u2500\u2500 DEV_SETUP.md -> Developer Setup Guidelines | \u2514\u2500\u2500 ... -> All helpful documentation which might help developers | \u251c\u2500\u2500 docs -> Devops related documents \u251c\u2500\u2500 \u2514\u2500\u2500 pull_request_template -> pull request templates | \u251c\u2500\u2500 pull_request_template.md -> Default pull request template. Default: feature branch | \u2514\u2500\u2500 branches -> Branch specific pull request templates | \u251c\u2500\u2500 feature.md -> Feature branch pull request template | \u251c\u2500\u2500 release.md -> Release branch pull request template | \u251c\u2500\u2500 bugfix.md -> Bugfix branch pull request template | \u2514\u2500\u2500 hotfix.md -> Hotfix branch pull request template | \u251c\u2500\u2500 dist -> Generated egg files -> Not committed to git | \u251c\u2500\u2500 scratch -> Random adhoc stuff - Not committed to git | \u251c\u2500\u2500 auto_generated -> Auto Generate documents - Not committed to git \u251c\u2500\u2500 \u251c\u2500\u2500 docstrings -> Docstrings -> Not committed to git \u2514\u2500\u2500 \u2514\u2500\u2500 test_coverage -> Test coverage report -> Not committed to git","title":"Project Structure"},{"location":"PROJECT_STRUCTURE/#python-project-structure","text":"puneetha_python_template -> Python template files \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module \u251c\u2500\u2500 ... -> Python files \u251c\u2500\u2500 utils -> Helper utilities/functions which can be used across projects | \u251c\u2500\u2500 __init__.py -> initializes the application, indicated that this folder is a python module | \u251c\u2500\u2500 file_utils.py -> File Utilities | \u2514\u2500\u2500 constants - Project specific constants | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Default values python files | \u2514\u2500\u2500 tests -> Unit test files | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 test_file_utils.py | \u2514\u2500\u2500 test_constants - Project specific constants | \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Default values python test files | \u251c\u2500\u2500 integration_tests -> Integration test files \u2502 \u251c\u2500\u2500 __init__.py | \u2514\u2500\u2500 ... -> Test files | \u251c\u2500\u2500 config -> Configuration files for code style, etc. \u2502 \u251c\u2500\u2500 .pylintrc -> Enforce PEP8 Code Style \u2502 \u251c\u2500\u2500 .pydocstylerc -> Enforce docstring style \u2502 \u251c\u2500\u2500 mkdocs.yml -> Enforce md file generator instructions \u2502 \u251c\u2500\u2500 .mypy.ini -> Type checking options \u2502 \u2514\u2500\u2500 tox.ini -> Pytest config - test a python package in a set of virtual environments | \u251c\u2500\u2500 requirements.txt -> This file lists all of the Python packages that your app depends on | \u251c\u2500\u2500 setup.py -> Python dependency management tool | \u251c\u2500\u2500 README.md -> Summary of the project and any helpful documentation | \u251c\u2500\u2500 .gitignore -> Instructs git to ignore the files/directories specified in this file | \u251c\u2500\u2500 .pre-commit-config.yaml -> Managing and maintaining pre-commit hooks | \u251c\u2500\u2500 scripts -> General scripts, deployment scripts, etc. | \u251c\u2500\u2500 project_docs -> detailed set of readme files for developers | \u251c\u2500\u2500 images -> Images to be used in readme documents | \u2514\u2500\u2500 ... -> All images which helps in documentation | \u251c\u2500\u2500 PROJECT_STRUCTURE.md -> Project Structure | \u251c\u2500\u2500 DEV_SETUP.md -> Developer Setup Guidelines | \u2514\u2500\u2500 ... -> All helpful documentation which might help developers | \u251c\u2500\u2500 docs -> Devops related documents \u251c\u2500\u2500 \u2514\u2500\u2500 pull_request_template -> pull request templates | \u251c\u2500\u2500 pull_request_template.md -> Default pull request template. Default: feature branch | \u2514\u2500\u2500 branches -> Branch specific pull request templates | \u251c\u2500\u2500 feature.md -> Feature branch pull request template | \u251c\u2500\u2500 release.md -> Release branch pull request template | \u251c\u2500\u2500 bugfix.md -> Bugfix branch pull request template | \u2514\u2500\u2500 hotfix.md -> Hotfix branch pull request template | \u251c\u2500\u2500 dist -> Generated egg files -> Not committed to git | \u251c\u2500\u2500 scratch -> Random adhoc stuff - Not committed to git | \u251c\u2500\u2500 auto_generated -> Auto Generate documents - Not committed to git \u251c\u2500\u2500 \u251c\u2500\u2500 docstrings -> Docstrings -> Not committed to git \u2514\u2500\u2500 \u2514\u2500\u2500 test_coverage -> Test coverage report -> Not committed to git","title":"Python Project Structure"}]}